@startuml
class scene.LevelGenerator {
- List<Entity> entities
- Random levelRandom
- boolean levelGeneratorBusy
- int currentLevel
+ <<Create>> LevelGenerator(long,int)
+ void genNextLevel()
- int randInt(int,int)
- void genEnemy(double,double,int,int,int)
- void genEntity(String,double,double)
+ List<Entity> getEntities()
+ boolean isLevelGeneratorBusy()
+ boolean isGameWin()
}
class exception.InvalidLevelException {
+ <<Create>> InvalidLevelException(int,int)
}
abstract class entity.base.Entity {
# double x
# double y
# String name
+ <<Create>> Entity()
+ <<Create>> Entity(String)
+ <<Create>> Entity(String,double,double)
+ String toString()
+ String getName()
+ void initializeTexture(String)
}
class entity.derived.Box {
+ <<Create>> Box(String,double,double)
+ void initializeBlockTexture(String)
}
class scene.GameEnd {
# Text title
# int retryOrExit
+ <<Create>> GameEnd(boolean)
# Text genAndAddText(String)
# void addButton()
+ int getRetryOrExit()
}
class entity.derived.CoinInCoinBox {
- int timer
- AnimationTimer animationTimer
- int jumpTime
- int fallingTime
- int jumpHeight
+ <<Create>> CoinInCoinBox(double,double)
+ void pop()
+ void animate()
}
abstract class entity.base.MoveableEntity {
# double velocityY
# double velocityX
# double sceneUpperBoundX
# double upperBoundX
# double upperBoundY
# double lowerBoundX
+ <<Create>> MoveableEntity(String)
+ <<Create>> MoveableEntity(String,double,double)
+ double getVelocityY()
+ void setVelocityY(double)
+ void setVelocityX(double)
}
class scene.Block {
+ <<Create>> Block(String)
+ <<Create>> Block()
}
class scene.Menu {
+ boolean isGameStart
+ <<Create>> Menu()
- void initializeTitle()
- void initializeAuthor()
- void initializeInstruction()
- void initializeLevelSetter()
- void handleLevelInput(TextField)
+ boolean isGameStart()
}
interface entity.base.Despawnable {
~ boolean isDespawn()
}
class application.Main {
+ {static} void main(String[])
+ void start(Stage)
}
interface entity.base.Renderable {
~ void update()
}
class entity.derived.Coin {
# int value
# boolean isDespawn
- int timer
+ <<Create>> Coin()
+ <<Create>> Coin(double,double)
+ <<Create>> Coin(int,double,double)
+ void collect()
+ boolean isDespawn()
+ String toString()
+ void setImage()
+ void animate()
}
class entity.derived.Enemy {
- boolean isDespawn
- AnimationTimer animationTimer
- int timer
- int pictureInd
- int lowerBound
- int upperBound
+ <<Create>> Enemy(String,double,double,int,int,int)
+ void attack(Player)
+ boolean isDespawn()
+ void update()
}
class entity.derived.Player {
- boolean isDespawn
- boolean isGoNextScene
- boolean isLeftEnabled
- boolean isRightEnabled
- boolean isUpEnabled
- boolean isDownEnabled
- boolean isJumping
- boolean isMovingRight
- int timer
+ <<Create>> Player()
+ <<Create>> Player(String)
+ void initializeMovement()
+ void returnToBegin()
+ boolean isOnTheGround()
+ void update()
+ String toString()
+ void animate()
+ boolean isGoNextScene()
+ void setGoNextScene(boolean)
+ boolean isFalling()
+ void killPlayer()
+ boolean isDespawn()
+ void setCorX(double)
+ void setCorY(double)
+ boolean getRightEnabled()
+ void setRightEnabled(boolean)
+ boolean getLeftEnabled()
+ void setLeftEnabled(boolean)
+ boolean isUpEnabled()
+ void setUpEnabled(boolean)
+ boolean isDownEnabled()
+ void setDownEnabled(boolean)
+ void setJumping(boolean)
}
class scene.ErrorMessageBox {
+ <<Create>> ErrorMessageBox(String)
}
class controller.TextureLoader {
- Map<String,Image> images
- Map<String,WritableImage> blockImages
- PixelReader blockTextureReader
- Map<String,Pair<Integer,Integer>> minecraftBlockNameToPos
+ <<Create>> TextureLoader()
+ Image getImage(String)
+ WritableImage getBlockImage(String)
}
class controller.GameController {
+ {static} boolean DEBUG_ENABLED
- {static} int point
- {static} int money
- {static} int secTimeElapsed
- {static} int minTimeElapsed
- {static} boolean isGameEnd
- {static} TextureLoader textureLoader
- {static} Text statusText
- {static} LevelGenerator levelGenerator
+ {static} void resetGameController()
+ {static} void initLevelGenerator(long,int)
+ {static} int getPoint()
+ {static} void increasePoint(int)
+ {static} Text getStatusText()
+ {static} void startStatusText()
+ {static} List<Entity> checkCollision(Player,LevelGenerator)
+ {static} boolean isGameEnd()
+ {static} void setGameEnd()
+ {static} TextureLoader getTextureLoader()
+ {static} void increaseMoney(int)
+ {static} LevelGenerator getLevelGenerator()
+ {static} String getTimeElapsed()
+ {static} int getMoney()
}
class scene.Terrain {
- Random terrainRandom
- List<String> backgroundBlockType
+ <<Create>> Terrain()
+ <<Create>> Terrain(long)
+ void initializeTerrain(String)
- Pane genStoneBackground()
}
class entity.derived.Pipe {
+ <<Create>> Pipe(String,double,double)
}
class entity.derived.CoinBox {
- boolean isEmpty
- int timer
- AnimationTimer animationTimer
- CoinInCoinBox coinInCoinBox
+ <<Create>> CoinBox(String,double,double)
+ void setImage()
+ void animate()
+ boolean getIsEmpty()
+ void setIsEmpty(boolean)
+ void coinPop()
+ CoinInCoinBox getCoinInCoinBox()
}


exception.Exception <|-- exception.InvalidLevelException
javafx.scene.image.ImageView <|-- entity.base.Entity
entity.base.Entity <|-- entity.derived.Box
javafx.scene.layout.VBox <|-- scene.GameEnd
entity.base.MoveableEntity <|-- entity.derived.CoinInCoinBox
entity.base.Entity <|-- entity.base.MoveableEntity
javafx.scene.layout.Pane <|-- scene.Block
javafx.scene.layout.VBox <|-- scene.Menu
javafx.application.Application <|-- application.Main
entity.base.Despawnable <|.. entity.derived.Coin
entity.base.Entity <|-- entity.derived.Coin
entity.base.Despawnable <|.. entity.derived.Enemy
entity.base.Renderable <|.. entity.derived.Enemy
entity.base.MoveableEntity <|-- entity.derived.Enemy
entity.base.Renderable <|.. entity.derived.Player
entity.base.Despawnable <|.. entity.derived.Player
entity.base.MoveableEntity <|-- entity.derived.Player
javafx.scene.control.Alert <|-- scene.ErrorMessageBox
javafx.scene.layout.GridPane <|-- scene.Terrain
entity.derived.Box <|-- entity.derived.Pipe
entity.derived.Box <|-- entity.derived.CoinBox
@enduml